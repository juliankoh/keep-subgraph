type TBTCDepositToken @entity {
  id: ID!
  name: String!
  symbol: String!
  address: Bytes!
  depositFactoryAddress: Bytes!
}

type TBTCToken @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  address: Bytes!
}

type FeeRebateToken @entity {
  id: ID!
  name: String!
  symbol: String!
  address: Bytes!
}

# from https://github.com/keep-network/tbtc/blob/master/solidity/contracts/deposit/DepositUtils.sol
type Deposit @entity {
  id: ID!
  tbtcSystem: Bytes! # address of the system contract
  tbtcToken: TBTCToken!
  tbtcDepositToken: TBTCDepositToken
  FeeRebateToken: FeeRebateToken
  vendingMachineAddress: Bytes!

  # SET DURING CONSTRUCTION
  lotSizeSatoshis: BigInt!
  currentState: DepositState
  signerFeeDivisor: Int!
  initialCollateralizedPercent: Int!
  undercollateralizedThresholdPercent: Int!
  severelyUndercollateralizedThresholdPercent: Int!
  keepSetupFee: BigInt!

  # SET ON FRAUD
  depositLiquidation: DepositLiquidation

  # written when we request a keep
  keepAddress: Bytes # The address of our keep contract
  signingGroupRequestedAt: BigInt # timestamp of signing group request
  # written when we get a keep result
  fundingProofTimerStart: BigInt # start of the funding proof period. reused for funding fraud proof period
  signingGroupPubkeyX: Bytes # The X coordinate of the signing group's pubkey
  signingGroupPubkeyY: Bytes # The Y coordinate of the signing group's pubkey
  # INITIALLY WRITTEN BY REDEMPTION FLOW
  depositRedemption: DepositRedemption

  # written when we get funded
  depositFunding: DepositFunding
}

enum DepositState {
  # DOES NOT EXIST YET
  START

  # FUNDING FLOW
  AWAITING_SIGNER_SETUP
  AWAITING_BTC_FUNDING_PROOF

  # FAILED SETUP
  FAILED_SETUP

  # ACTIVE
  ACTIVE # includes courtesy call
  # REDEMPTION FLOW
  AWAITING_WITHDRAWAL_SIGNATURE
  AWAITING_WITHDRAWAL_PROOF
  REDEEMED

  # SIGNER LIQUIDATION FLOW
  COURTESY_CALL
  FRAUD_LIQUIDATION_IN_PROGRESS
  LIQUIDATION_IN_PROGRESS
  LIQUIDATED
}

type DepositFunding @entity {
  id: ID!
  deposit: Deposit!
  bitcoinPrice: BigInt
  bondRequirementWei: BigInt
  utxoValueBytes: Bytes # LE uint. the size of the deposit UTXO in satoshis
  fundedAt: BigInt # timestamp when funding proof was received
  utxoOutpoint: Bytes # the 36-byte outpoint of the custodied UTXO
}

type DepositLiquidation @entity {
  id: ID!
  deposit: Deposit!
  liquidationInitiated: BigInt # Timestamp of when liquidation starts
  courtesyCallInitiated: BigInt # When the courtesy call is issued
  liquidationInitiator: Bytes
}

type DepositRedemption @entity {
  id: ID!
  deposit: Deposit!
  redeemerAddress: Bytes # The redeemer's address, used as fallback for fraud in redemption
  redeemerOutputScript: Bytes # The redeemer output script
  initialRedemptionFee: BigInt # the initial fee as requested
  latestRedemptionFee: BigInt # the fee currently required by a redemption transaction
  withdrawalRequestTime: BigInt # the most recent withdrawal request timestamp
  lastRequestedDigest: Bytes # the digest most recently requested for signing
}
